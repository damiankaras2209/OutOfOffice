// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OutOfOffice.Data;

#nullable disable

namespace OutOfOffice.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240624165011_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OutOfOffice.Models.AccessResourceModel", b =>
                {
                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("Resource")
                        .HasColumnType("int");

                    b.Property<bool>("HasAccess")
                        .HasColumnType("bit");

                    b.HasKey("Position", "Resource");

                    b.ToTable("AccessResources");

                    b.HasData(
                        new
                        {
                            Position = 0,
                            Resource = 0,
                            HasAccess = false
                        },
                        new
                        {
                            Position = 0,
                            Resource = 1,
                            HasAccess = false
                        },
                        new
                        {
                            Position = 0,
                            Resource = 2,
                            HasAccess = true
                        },
                        new
                        {
                            Position = 0,
                            Resource = 3,
                            HasAccess = false
                        },
                        new
                        {
                            Position = 0,
                            Resource = 4,
                            HasAccess = true
                        },
                        new
                        {
                            Position = 0,
                            Resource = 5,
                            HasAccess = false
                        },
                        new
                        {
                            Position = 0,
                            Resource = 6,
                            HasAccess = true
                        },
                        new
                        {
                            Position = 0,
                            Resource = 7,
                            HasAccess = false
                        },
                        new
                        {
                            Position = 0,
                            Resource = 8,
                            HasAccess = false
                        },
                        new
                        {
                            Position = 1,
                            Resource = 0,
                            HasAccess = true
                        },
                        new
                        {
                            Position = 1,
                            Resource = 1,
                            HasAccess = true
                        },
                        new
                        {
                            Position = 1,
                            Resource = 2,
                            HasAccess = true
                        },
                        new
                        {
                            Position = 1,
                            Resource = 3,
                            HasAccess = true
                        },
                        new
                        {
                            Position = 1,
                            Resource = 4,
                            HasAccess = true
                        },
                        new
                        {
                            Position = 1,
                            Resource = 5,
                            HasAccess = true
                        },
                        new
                        {
                            Position = 1,
                            Resource = 6,
                            HasAccess = true
                        },
                        new
                        {
                            Position = 1,
                            Resource = 7,
                            HasAccess = true
                        },
                        new
                        {
                            Position = 1,
                            Resource = 8,
                            HasAccess = true
                        },
                        new
                        {
                            Position = 2,
                            Resource = 0,
                            HasAccess = true
                        },
                        new
                        {
                            Position = 2,
                            Resource = 1,
                            HasAccess = false
                        },
                        new
                        {
                            Position = 2,
                            Resource = 2,
                            HasAccess = true
                        },
                        new
                        {
                            Position = 2,
                            Resource = 3,
                            HasAccess = true
                        },
                        new
                        {
                            Position = 2,
                            Resource = 4,
                            HasAccess = false
                        },
                        new
                        {
                            Position = 2,
                            Resource = 5,
                            HasAccess = true
                        },
                        new
                        {
                            Position = 2,
                            Resource = 6,
                            HasAccess = true
                        },
                        new
                        {
                            Position = 2,
                            Resource = 7,
                            HasAccess = false
                        },
                        new
                        {
                            Position = 2,
                            Resource = 8,
                            HasAccess = true
                        },
                        new
                        {
                            Position = 3,
                            Resource = 0,
                            HasAccess = true
                        },
                        new
                        {
                            Position = 3,
                            Resource = 1,
                            HasAccess = true
                        },
                        new
                        {
                            Position = 3,
                            Resource = 2,
                            HasAccess = true
                        },
                        new
                        {
                            Position = 3,
                            Resource = 3,
                            HasAccess = true
                        },
                        new
                        {
                            Position = 3,
                            Resource = 4,
                            HasAccess = false
                        },
                        new
                        {
                            Position = 3,
                            Resource = 5,
                            HasAccess = true
                        },
                        new
                        {
                            Position = 3,
                            Resource = 6,
                            HasAccess = true
                        },
                        new
                        {
                            Position = 3,
                            Resource = 7,
                            HasAccess = true
                        },
                        new
                        {
                            Position = 3,
                            Resource = 8,
                            HasAccess = true
                        });
                });

            modelBuilder.Entity("OutOfOffice.Models.ApprovalRequestModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ApproverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LeaveRequestID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ApproverId");

                    b.HasIndex("LeaveRequestID");

                    b.ToTable("ApprovalRequests");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ApproverId = "3c6a178e-55e4-4f58-b88a-fa430ebaac35",
                            LeaveRequestID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            ApproverId = "3c6a178e-55e4-4f58-b88a-fa430ebaac35",
                            LeaveRequestID = 2,
                            Status = 0
                        },
                        new
                        {
                            ID = 3,
                            ApproverId = "3c6a178e-55e4-4f58-b88a-fa430ebaac35",
                            LeaveRequestID = 3,
                            Status = 0
                        });
                });

            modelBuilder.Entity("OutOfOffice.Models.EmployeeModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Balance")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NID")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeoplePartnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Subdivision")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PeoplePartnerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Employees", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3c6a178e-55e4-4f58-b88a-fa430ebaac35",
                            Balance = 0,
                            FullName = "HR Manager",
                            NID = 1,
                            NormalizedUserName = "hrmanager",
                            PasswordHash = "AQAAAAIAAYagAAAAEJf3mcMMgf5yHMLgut6WGHsTbXx5Ha6dTYl6rkCXE11KQMs1FuJ6W7q6pNbTLuONBg==",
                            PeoplePartnerId = "3c6a178e-55e4-4f58-b88a-fa430ebaac35",
                            Position = 1,
                            Status = 0,
                            Subdivision = 0,
                            UserName = "hrmanager"
                        },
                        new
                        {
                            Id = "b0e12ba6-098d-4d47-88dc-7adba060c2c6",
                            Balance = 0,
                            FullName = "Administrator",
                            NID = 2,
                            NormalizedUserName = "administrator",
                            PasswordHash = "AQAAAAIAAYagAAAAEJf3mcMMgf5yHMLgut6WGHsTbXx5Ha6dTYl6rkCXE11KQMs1FuJ6W7q6pNbTLuONBg==",
                            PeoplePartnerId = "3c6a178e-55e4-4f58-b88a-fa430ebaac35",
                            Position = 2,
                            Status = 0,
                            Subdivision = 0,
                            UserName = "administrator"
                        },
                        new
                        {
                            Id = "4303f29a-ec50-4626-b96d-e5d97620c0fd",
                            Balance = 0,
                            FullName = "Project Manager",
                            NID = 3,
                            NormalizedUserName = "projectmanager",
                            PasswordHash = "AQAAAAIAAYagAAAAEJf3mcMMgf5yHMLgut6WGHsTbXx5Ha6dTYl6rkCXE11KQMs1FuJ6W7q6pNbTLuONBg==",
                            PeoplePartnerId = "3c6a178e-55e4-4f58-b88a-fa430ebaac35",
                            Position = 0,
                            Status = 0,
                            Subdivision = 0,
                            UserName = "projectmanager"
                        },
                        new
                        {
                            Id = "f939b674-8010-4457-82ea-50645329ae70",
                            Balance = 0,
                            FullName = "PM",
                            NID = 4,
                            NormalizedUserName = "projectmanager2",
                            PasswordHash = "AQAAAAIAAYagAAAAEJf3mcMMgf5yHMLgut6WGHsTbXx5Ha6dTYl6rkCXE11KQMs1FuJ6W7q6pNbTLuONBg==",
                            PeoplePartnerId = "3c6a178e-55e4-4f58-b88a-fa430ebaac35",
                            Position = 0,
                            Status = 0,
                            Subdivision = 1,
                            UserName = "projectmanager2"
                        },
                        new
                        {
                            Id = "80915350-c919-4135-a694-92e014c8e967",
                            Balance = 20,
                            FullName = "Employee",
                            NID = 5,
                            NormalizedUserName = "employee",
                            PasswordHash = "AQAAAAIAAYagAAAAEJf3mcMMgf5yHMLgut6WGHsTbXx5Ha6dTYl6rkCXE11KQMs1FuJ6W7q6pNbTLuONBg==",
                            PeoplePartnerId = "3c6a178e-55e4-4f58-b88a-fa430ebaac35",
                            Position = 3,
                            Status = 0,
                            Subdivision = 0,
                            UserName = "employee"
                        },
                        new
                        {
                            Id = "b9857b90-1a2c-44d2-a808-d6c7af9c86c3",
                            Balance = 14,
                            FullName = "Employee 2",
                            NID = 6,
                            NormalizedUserName = "employee2",
                            PasswordHash = "AQAAAAIAAYagAAAAEJf3mcMMgf5yHMLgut6WGHsTbXx5Ha6dTYl6rkCXE11KQMs1FuJ6W7q6pNbTLuONBg==",
                            PeoplePartnerId = "3c6a178e-55e4-4f58-b88a-fa430ebaac35",
                            Position = 3,
                            Status = 0,
                            Subdivision = 0,
                            UserName = "employee2"
                        });
                });

            modelBuilder.Entity("OutOfOffice.Models.LeaveRequestModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AbsenceReason")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeId");

                    b.ToTable("LeaveRequests");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AbsenceReason = 2,
                            Comment = "Comment A",
                            EmployeeId = "80915350-c919-4135-a694-92e014c8e967",
                            EndDate = new DateOnly(2024, 6, 3),
                            StartDate = new DateOnly(2024, 6, 1),
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            AbsenceReason = 0,
                            Comment = "Comment B",
                            EmployeeId = "b9857b90-1a2c-44d2-a808-d6c7af9c86c3",
                            EndDate = new DateOnly(2024, 6, 23),
                            StartDate = new DateOnly(2024, 6, 23),
                            Status = 0
                        },
                        new
                        {
                            ID = 3,
                            AbsenceReason = 3,
                            Comment = "Comment C",
                            EmployeeId = "80915350-c919-4135-a694-92e014c8e967",
                            EndDate = new DateOnly(2024, 3, 30),
                            StartDate = new DateOnly(2024, 3, 20),
                            Status = 0
                        });
                });

            modelBuilder.Entity("OutOfOffice.Models.ProjectModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("ProjectManagerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProjectType")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProjectManagerId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Comment = "Comment X",
                            EndDate = new DateOnly(2024, 11, 30),
                            ProjectManagerId = "4303f29a-ec50-4626-b96d-e5d97620c0fd",
                            ProjectType = 2,
                            StartDate = new DateOnly(2023, 10, 1),
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            Comment = "Comment Z",
                            EndDate = new DateOnly(2024, 5, 30),
                            ProjectManagerId = "4303f29a-ec50-4626-b96d-e5d97620c0fd",
                            ProjectType = 0,
                            StartDate = new DateOnly(2024, 1, 15),
                            Status = 1
                        },
                        new
                        {
                            ID = 3,
                            Comment = "Comment Y",
                            EndDate = new DateOnly(2023, 12, 31),
                            ProjectManagerId = "4303f29a-ec50-4626-b96d-e5d97620c0fd",
                            ProjectType = 1,
                            StartDate = new DateOnly(2020, 1, 1),
                            Status = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OutOfOffice.Models.EmployeeModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OutOfOffice.Models.EmployeeModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutOfOffice.Models.EmployeeModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OutOfOffice.Models.EmployeeModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OutOfOffice.Models.ApprovalRequestModel", b =>
                {
                    b.HasOne("OutOfOffice.Models.EmployeeModel", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutOfOffice.Models.LeaveRequestModel", "LeaveRequest")
                        .WithMany()
                        .HasForeignKey("LeaveRequestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("LeaveRequest");
                });

            modelBuilder.Entity("OutOfOffice.Models.EmployeeModel", b =>
                {
                    b.HasOne("OutOfOffice.Models.EmployeeModel", "PeoplePartner")
                        .WithMany()
                        .HasForeignKey("PeoplePartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OutOfOffice.Models.ProjectModel", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.Navigation("PeoplePartner");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("OutOfOffice.Models.LeaveRequestModel", b =>
                {
                    b.HasOne("OutOfOffice.Models.EmployeeModel", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("OutOfOffice.Models.ProjectModel", b =>
                {
                    b.HasOne("OutOfOffice.Models.EmployeeModel", "ProjectManager")
                        .WithMany()
                        .HasForeignKey("ProjectManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectManager");
                });
#pragma warning restore 612, 618
        }
    }
}
